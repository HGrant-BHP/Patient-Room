<div class="admin-section">
    <h1>Admin Dashboard</h1>
    
    <div class="valid-ids">
        <h2>Valid IDs</h2>
        <ul>
            {{#each validIds}}
                <li>{{this}}</li>
            {{/each}}
        </ul>
    </div>

    <div class="user-list" id="userList">
        <h2>Connected Users</h2>
        <div id="connectedUsers">
            <!-- Users will be populated here -->
        </div>
        <div id="debug" style="margin-top: 20px; padding: 10px; background: #f8f9fa; border-radius: 4px;">
            <h3>Debug Info</h3>
            <pre id="debugInfo">Waiting for connection...</pre>
        </div>
    </div>

    <div id="alertLog">
        <h2>Alert Log</h2>
        <div id="alerts"></div>
    </div>
</div>

<script>
    const socket = io();
    const connectedUsers = document.getElementById('connectedUsers');
    const alertsDiv = document.getElementById('alerts');
    const debugInfo = document.getElementById('debugInfo');

    function updateDebugInfo(message) {
        const timestamp = new Date().toLocaleTimeString();
        debugInfo.textContent += `\n[${timestamp}] ${message}`;
        debugInfo.scrollTop = debugInfo.scrollHeight;
    }

    // Socket connection status
    socket.on('connect', () => {
        updateDebugInfo('Connected to server');
    });

    socket.on('disconnect', () => {
        updateDebugInfo('Disconnected from server');
        connectedUsers.innerHTML = '<p>Disconnected from server...</p>';
    });

    // Handle users list update
    socket.on('users_list', (users) => {
        updateDebugInfo(`Received users list: ${users.length} users`);
        console.log('Received users:', users);
        updateUsersList(users);
    });

    // Handle user alerts
    socket.on('user_alert', ({ socketId, userId, username }) => {
        updateDebugInfo(`Alert received from ${username} (${userId})`);
        console.log('Alert received:', { socketId, userId, username });
        
        // Create popup
        const popup = document.createElement('div');
        popup.className = 'alert-popup';
        popup.innerHTML = `
            <div class="popup-content">
                <h3>Alert Received!</h3>
                <p><strong>${username}</strong></p>
                <p>ID: ${userId}</p>
                <p>Time: ${new Date().toLocaleTimeString()}</p>
                <button onclick="this.parentElement.parentElement.remove()">Close</button>
            </div>
        `;
        document.body.appendChild(popup);

        // Add to alert log
        const alertElement = document.createElement('div');
        alertElement.className = 'alert';
        alertElement.innerHTML = `
            <p><strong>${username}</strong> (ID: ${userId}) sent an alert at ${new Date().toLocaleTimeString()}</p>
        `;
        alertsDiv.insertBefore(alertElement, alertsDiv.firstChild);

        // Auto-remove popup after 10 seconds
        setTimeout(() => popup.remove(), 10000);
    });

    // Handle user disconnection
    socket.on('user_disconnected', (socketId) => {
        updateDebugInfo(`User disconnected: ${socketId}`);
        const userElement = document.getElementById(`user-${socketId}`);
        if (userElement) {
            userElement.remove();
        }
    });

    function updateUsersList(users) {
        if (users.length === 0) {
            connectedUsers.innerHTML = '<p class="no-users">No users connected</p>';
            return;
        }

        const usersHtml = users.map(user => `
            <div class="user-item" id="user-${user.id}">
                <div class="user-info">
                    <div class="name-section">
                        <div class="name-display ${user.name === 'Guest' ? 'hidden' : ''}" id="name-display-${user.id}">
                            <span class="user-name">${user.name}</span>
                            <button class="edit-btn" onclick="toggleEdit('${user.id}')">
                                <i class="fas fa-edit"></i>
                            </button>
                        </div>
                        <div class="name-edit ${user.name === 'Guest' ? '' : 'hidden'}" id="name-edit-${user.id}">
                            <input 
                                type="text" 
                                placeholder="Enter name" 
                                value="${user.name === 'Guest' ? '' : user.name}"
                                onkeypress="if(event.key === 'Enter') saveUsername('${user.id}', this.value)"
                            >
                            <button class="save-btn" onclick="saveUsername('${user.id}', this.previousElementSibling.value)">
                                Save
                            </button>
                        </div>
                    </div>
                    <span class="user-id">ID: ${user.userId}</span>
                </div>
            </div>
        `).join('');
        
        connectedUsers.innerHTML = usersHtml;
    }

    function toggleEdit(socketId) {
        const displayDiv = document.getElementById(`name-display-${socketId}`);
        const editDiv = document.getElementById(`name-edit-${socketId}`);
        displayDiv.classList.toggle('hidden');
        editDiv.classList.toggle('hidden');
        const input = editDiv.querySelector('input');
        input.value = displayDiv.querySelector('.user-name').textContent;
        input.focus();
    }

    function saveUsername(socketId, username) {
        if (username.trim()) {
            socket.emit('set_username', { socketId, username: username.trim() });
            const displayDiv = document.getElementById(`name-display-${socketId}`);
            const editDiv = document.getElementById(`name-edit-${socketId}`);
            displayDiv.querySelector('.user-name').textContent = username.trim();
            displayDiv.classList.remove('hidden');
            editDiv.classList.add('hidden');
        }
    }
</script>

<style>
    .admin-section {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .alert {
        padding: 10px;
        margin: 5px 0;
        background-color: #fff3cd;
        border: 1px solid #ffeeba;
        border-radius: 4px;
    }
    
    .user-item {
        margin: 10px 0;
        padding: 15px;
        background-color: #f8f9fa;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    .user-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .name-section {
        flex: 1;
        margin-right: 20px;
    }

    .user-id {
        color: #666;
        font-size: 0.9em;
        background-color: #e9ecef;
        padding: 4px 8px;
        border-radius: 4px;
    }
    
    .name-edit input {
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
        margin-right: 10px;
        width: 200px;
    }
    
    .save-btn, .edit-btn {
        background-color: #28a745;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
    }
    
    .edit-btn {
        background-color: #6c757d;
        padding: 4px 8px;
        margin-left: 10px;
    }
    
    .save-btn:hover {
        background-color: #218838;
    }
    
    .edit-btn:hover {
        background-color: #5a6268;
    }

    .valid-ids {
        margin-bottom: 20px;
        padding: 15px;
        background-color: #e9ecef;
        border-radius: 8px;
    }

    .valid-ids ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .valid-ids li {
        display: inline-block;
        margin: 5px;
        padding: 5px 10px;
        background-color: #007bff;
        color: white;
        border-radius: 4px;
    }

    .hidden {
        display: none;
    }

    .name-display {
        display: flex;
        align-items: center;
    }

    .user-name {
        font-size: 1.1em;
        font-weight: 500;
    }

    .alert-popup {
        position: fixed;
        top: 20px;
        right: 20px;
        background: white;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        z-index: 1000;
        animation: slideIn 0.3s ease-out;
    }

    .popup-content {
        text-align: center;
    }

    .popup-content h3 {
        margin-top: 0;
        color: #dc3545;
    }

    .popup-content button {
        background-color: #6c757d;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
        margin-top: 10px;
    }

    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }

    #connectedUsers {
        margin-top: 15px;
    }

    h2 {
        color: #343a40;
        margin-bottom: 15px;
    }

    .no-users {
        text-align: center;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 8px;
        color: #6c757d;
    }
</style> 